// Code generated by protoc-gen-go.
// source: protos/server/server.proto
// DO NOT EDIT!

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	protos/server/server.proto

It has these top-level messages:
	MyMessage
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MyMessage struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	Num uint32 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
}

func (m *MyMessage) Reset()                    { *m = MyMessage{} }
func (m *MyMessage) String() string            { return proto.CompactTextString(m) }
func (*MyMessage) ProtoMessage()               {}
func (*MyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MyMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MyMessage) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterType((*MyMessage)(nil), "server.MyMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MyServer service

type MyServerClient interface {
	Simple(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*MyMessage, error)
	Unary(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (MyServer_UnaryClient, error)
	Bidi(ctx context.Context, opts ...grpc.CallOption) (MyServer_BidiClient, error)
}

type myServerClient struct {
	cc *grpc.ClientConn
}

func NewMyServerClient(cc *grpc.ClientConn) MyServerClient {
	return &myServerClient{cc}
}

func (c *myServerClient) Simple(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*MyMessage, error) {
	out := new(MyMessage)
	err := grpc.Invoke(ctx, "/server.MyServer/Simple", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServerClient) Unary(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (MyServer_UnaryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MyServer_serviceDesc.Streams[0], c.cc, "/server.MyServer/Unary", opts...)
	if err != nil {
		return nil, err
	}
	x := &myServerUnaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MyServer_UnaryClient interface {
	Recv() (*MyMessage, error)
	grpc.ClientStream
}

type myServerUnaryClient struct {
	grpc.ClientStream
}

func (x *myServerUnaryClient) Recv() (*MyMessage, error) {
	m := new(MyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myServerClient) Bidi(ctx context.Context, opts ...grpc.CallOption) (MyServer_BidiClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MyServer_serviceDesc.Streams[1], c.cc, "/server.MyServer/Bidi", opts...)
	if err != nil {
		return nil, err
	}
	x := &myServerBidiClient{stream}
	return x, nil
}

type MyServer_BidiClient interface {
	Send(*MyMessage) error
	Recv() (*MyMessage, error)
	grpc.ClientStream
}

type myServerBidiClient struct {
	grpc.ClientStream
}

func (x *myServerBidiClient) Send(m *MyMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myServerBidiClient) Recv() (*MyMessage, error) {
	m := new(MyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MyServer service

type MyServerServer interface {
	Simple(context.Context, *google_protobuf1.Empty) (*MyMessage, error)
	Unary(*google_protobuf1.Empty, MyServer_UnaryServer) error
	Bidi(MyServer_BidiServer) error
}

func RegisterMyServerServer(s *grpc.Server, srv MyServerServer) {
	s.RegisterService(&_MyServer_serviceDesc, srv)
}

func _MyServer_Simple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServerServer).Simple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.MyServer/Simple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServerServer).Simple(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyServer_Unary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyServerServer).Unary(m, &myServerUnaryServer{stream})
}

type MyServer_UnaryServer interface {
	Send(*MyMessage) error
	grpc.ServerStream
}

type myServerUnaryServer struct {
	grpc.ServerStream
}

func (x *myServerUnaryServer) Send(m *MyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MyServer_Bidi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyServerServer).Bidi(&myServerBidiServer{stream})
}

type MyServer_BidiServer interface {
	Send(*MyMessage) error
	Recv() (*MyMessage, error)
	grpc.ServerStream
}

type myServerBidiServer struct {
	grpc.ServerStream
}

func (x *myServerBidiServer) Send(m *MyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myServerBidiServer) Recv() (*MyMessage, error) {
	m := new(MyMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MyServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.MyServer",
	HandlerType: (*MyServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Simple",
			Handler:    _MyServer_Simple_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Unary",
			Handler:       _MyServer_Unary_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Bidi",
			Handler:       _MyServer_Bidi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/server/server.proto",
}

func init() { proto.RegisterFile("protos/server/server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x31, 0x4e, 0xf3, 0x30,
	0x14, 0xc7, 0xe5, 0x7e, 0x1f, 0x15, 0xb5, 0x68, 0x29, 0x16, 0x54, 0x55, 0x60, 0xa8, 0x3a, 0x75,
	0xa9, 0x5d, 0xe0, 0x02, 0xa8, 0x12, 0x2c, 0x55, 0x96, 0x56, 0x2c, 0x6c, 0x76, 0x62, 0x1c, 0x97,
	0xc6, 0xb6, 0x6c, 0xa7, 0x28, 0x2b, 0x57, 0xe0, 0x68, 0x5c, 0x81, 0x91, 0x43, 0xa0, 0x38, 0x09,
	0x12, 0x82, 0x85, 0xc9, 0xef, 0xff, 0x9e, 0xfd, 0xfb, 0x3d, 0xc9, 0x30, 0x32, 0x56, 0x7b, 0xed,
	0x88, 0xe3, 0x76, 0xcf, 0x6d, 0x73, 0xe0, 0xd0, 0x44, 0xdd, 0x3a, 0x45, 0x17, 0x42, 0x6b, 0xb1,
	0xe3, 0x84, 0x1a, 0x49, 0xa8, 0x52, 0xda, 0x53, 0x2f, 0xb5, 0x72, 0xf5, 0xad, 0xe8, 0xbc, 0x99,
	0x86, 0xc4, 0x8a, 0x47, 0xc2, 0x73, 0xe3, 0xcb, 0x7a, 0x38, 0x25, 0xb0, 0x17, 0x97, 0x31, 0x77,
	0x8e, 0x0a, 0x8e, 0x86, 0xf0, 0x5f, 0xee, 0xc4, 0x18, 0x4c, 0xc0, 0xac, 0xb7, 0xae, 0xca, 0xaa,
	0xa3, 0x8a, 0x7c, 0xdc, 0x99, 0x80, 0x59, 0x7f, 0x5d, 0x95, 0x57, 0x1f, 0x00, 0x1e, 0xc6, 0xe5,
	0x26, 0x88, 0xd1, 0x0a, 0x76, 0x37, 0x32, 0x37, 0x3b, 0x8e, 0x46, 0xb8, 0xb6, 0xe0, 0xd6, 0x82,
	0x6f, 0x2b, 0x4b, 0x74, 0x82, 0x9b, 0x8d, 0xbf, 0x2c, 0xd3, 0xd1, 0xcb, 0xdb, 0xfb, 0x6b, 0x67,
	0x88, 0x06, 0x61, 0xdf, 0xfd, 0x25, 0x71, 0x35, 0x62, 0x05, 0x0f, 0xee, 0x15, 0xb5, 0xe5, 0x5f,
	0x58, 0x67, 0x81, 0x75, 0x8c, 0xfa, 0x2d, 0xab, 0xa8, 0x08, 0x0b, 0x80, 0xee, 0xe0, 0xff, 0xa5,
	0x4c, 0x25, 0xfa, 0xf9, 0xe6, 0x37, 0xcc, 0x69, 0xc0, 0x0c, 0xa6, 0x47, 0x2d, 0x86, 0xc9, 0x54,
	0xce, 0xc0, 0x02, 0x2c, 0x97, 0x0f, 0x37, 0x42, 0xfa, 0xac, 0x60, 0x38, 0xd1, 0x39, 0xd9, 0xea,
	0x8c, 0x2a, 0x66, 0xa9, 0x4a, 0x33, 0x6d, 0x9d, 0x27, 0x42, 0x9b, 0x8c, 0xdb, 0xad, 0x9b, 0x0b,
	0x6b, 0x92, 0xf9, 0x33, 0x67, 0x4e, 0x27, 0x4f, 0xdc, 0x93, 0x6f, 0x7f, 0xc6, 0xba, 0x21, 0x5e,
	0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x28, 0x39, 0x14, 0xcb, 0x01, 0x00, 0x00,
}
