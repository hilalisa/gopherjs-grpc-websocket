// Code generated by protoc-gen-go.
// source: protos/server/server.proto
// DO NOT EDIT!

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	protos/server/server.proto

It has these top-level messages:
	MyMessage
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MyMessage struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	Num uint32 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
}

func (m *MyMessage) Reset()                    { *m = MyMessage{} }
func (m *MyMessage) String() string            { return proto.CompactTextString(m) }
func (*MyMessage) ProtoMessage()               {}
func (*MyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MyMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MyMessage) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterType((*MyMessage)(nil), "server.MyMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Server service

type ServerClient interface {
	Simple(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*MyMessage, error)
	Unary(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (Server_UnaryClient, error)
	Bidi(ctx context.Context, opts ...grpc.CallOption) (Server_BidiClient, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Simple(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*MyMessage, error) {
	out := new(MyMessage)
	err := grpc.Invoke(ctx, "/server.Server/Simple", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Unary(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (Server_UnaryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Server_serviceDesc.Streams[0], c.cc, "/server.Server/Unary", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverUnaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Server_UnaryClient interface {
	Recv() (*MyMessage, error)
	grpc.ClientStream
}

type serverUnaryClient struct {
	grpc.ClientStream
}

func (x *serverUnaryClient) Recv() (*MyMessage, error) {
	m := new(MyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) Bidi(ctx context.Context, opts ...grpc.CallOption) (Server_BidiClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Server_serviceDesc.Streams[1], c.cc, "/server.Server/Bidi", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverBidiClient{stream}
	return x, nil
}

type Server_BidiClient interface {
	Send(*MyMessage) error
	Recv() (*MyMessage, error)
	grpc.ClientStream
}

type serverBidiClient struct {
	grpc.ClientStream
}

func (x *serverBidiClient) Send(m *MyMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverBidiClient) Recv() (*MyMessage, error) {
	m := new(MyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Server service

type ServerServer interface {
	Simple(context.Context, *google_protobuf1.Empty) (*MyMessage, error)
	Unary(*google_protobuf1.Empty, Server_UnaryServer) error
	Bidi(Server_BidiServer) error
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_Simple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Simple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Server/Simple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Simple(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Unary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).Unary(m, &serverUnaryServer{stream})
}

type Server_UnaryServer interface {
	Send(*MyMessage) error
	grpc.ServerStream
}

type serverUnaryServer struct {
	grpc.ServerStream
}

func (x *serverUnaryServer) Send(m *MyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Server_Bidi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerServer).Bidi(&serverBidiServer{stream})
}

type Server_BidiServer interface {
	Send(*MyMessage) error
	Recv() (*MyMessage, error)
	grpc.ServerStream
}

type serverBidiServer struct {
	grpc.ServerStream
}

func (x *serverBidiServer) Send(m *MyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverBidiServer) Recv() (*MyMessage, error) {
	m := new(MyMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Simple",
			Handler:    _Server_Simple_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Unary",
			Handler:       _Server_Unary_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Bidi",
			Handler:       _Server_Bidi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/server/server.proto",
}

func init() { proto.RegisterFile("protos/server/server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0xe5, 0x02, 0x91, 0x6a, 0xd1, 0x52, 0x2c, 0xa8, 0xaa, 0xc0, 0x50, 0x75, 0xea, 0x52,
	0xbb, 0xc0, 0x05, 0x50, 0x25, 0x58, 0xaa, 0x2e, 0xad, 0x58, 0xd8, 0xec, 0xc4, 0x38, 0x2e, 0x8d,
	0x6d, 0xd9, 0x4e, 0x51, 0x56, 0xae, 0xc0, 0xd1, 0xb8, 0x02, 0x13, 0xa7, 0x40, 0x71, 0x12, 0x24,
	0x04, 0x0b, 0x93, 0xdf, 0xff, 0x9e, 0xfd, 0x7d, 0x4f, 0x32, 0x8c, 0x8d, 0xd5, 0x5e, 0x3b, 0xe2,
	0xb8, 0xdd, 0x73, 0xdb, 0x1c, 0x38, 0x34, 0x51, 0x54, 0xa7, 0xf8, 0x52, 0x68, 0x2d, 0x76, 0x9c,
	0x50, 0x23, 0x09, 0x55, 0x4a, 0x7b, 0xea, 0xa5, 0x56, 0xae, 0xbe, 0x15, 0x5f, 0x34, 0xd3, 0x90,
	0x58, 0xf1, 0x44, 0x78, 0x6e, 0x7c, 0x59, 0x0f, 0x27, 0x04, 0x76, 0x57, 0xe5, 0x8a, 0x3b, 0x47,
	0x05, 0x47, 0x03, 0x78, 0x90, 0x3b, 0x31, 0x02, 0x63, 0x30, 0xed, 0xae, 0xab, 0xb2, 0xea, 0xa8,
	0x22, 0x1f, 0x75, 0xc6, 0x60, 0xda, 0x5b, 0x57, 0xe5, 0xf5, 0x27, 0x80, 0xd1, 0x26, 0x68, 0xd1,
	0x12, 0x46, 0x1b, 0x99, 0x9b, 0x1d, 0x47, 0x43, 0x5c, 0x3b, 0x70, 0xeb, 0xc0, 0x77, 0x95, 0x23,
	0x3e, 0xc5, 0xcd, 0xbe, 0xdf, 0x8e, 0xc9, 0xf0, 0xf5, 0xfd, 0xe3, 0xad, 0x33, 0x40, 0xfd, 0xb0,
	0xed, 0xfe, 0x8a, 0xb8, 0x1a, 0xb1, 0x84, 0x47, 0x0f, 0x8a, 0xda, 0xf2, 0x3f, 0xac, 0xf3, 0xc0,
	0x3a, 0x41, 0xbd, 0x96, 0x55, 0x54, 0x84, 0x39, 0x40, 0xf7, 0xf0, 0x70, 0x21, 0x53, 0x89, 0x7e,
	0xbf, 0xf9, 0x0b, 0x73, 0x16, 0x30, 0x7d, 0x74, 0xdc, 0x62, 0x98, 0x4c, 0xe5, 0x14, 0xcc, 0xc1,
	0x62, 0xf1, 0x78, 0x2b, 0xa4, 0xcf, 0x0a, 0x86, 0x13, 0x9d, 0x93, 0xad, 0xce, 0xa8, 0x62, 0x96,
	0xaa, 0x34, 0xd3, 0xd6, 0x79, 0x22, 0xb4, 0xc9, 0xb8, 0xdd, 0xba, 0x99, 0xb0, 0x26, 0x99, 0xbd,
	0x70, 0xe6, 0x74, 0xf2, 0xcc, 0x3d, 0xf9, 0xf1, 0x63, 0x2c, 0x0a, 0xf1, 0xe6, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0x86, 0x5b, 0xa2, 0x3a, 0xc9, 0x01, 0x00, 0x00,
}
